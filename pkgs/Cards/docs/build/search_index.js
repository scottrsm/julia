var documenterSearchIndex = {"docs":
[{"location":"#Cards.jl-Documentation","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"CurrentModule = Cards","category":"page"},{"location":"#Enums","page":"Cards.jl Documentation","title":"Enums","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Suit","category":"page"},{"location":"#Cards.Suit","page":"Cards.jl Documentation","title":"Cards.Suit","text":"Suit (Enum)\n\nAllowable suits in poker; ordered by strength from lowest to highest.\n\nFields\n\n♠\n♦  \n♣  \n♥ \n\n\n\n\n\n","category":"type"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Rank","category":"page"},{"location":"#Cards.Rank","page":"Cards.jl Documentation","title":"Cards.Rank","text":"Rank (Enum)\n\nCard ranks in poker; ordered by strength from lowest to highest.\n\nFields\n\nTwo -- Nine\nJack\nQueen\nKing\nAce\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"PokerType","category":"page"},{"location":"#Cards.PokerType","page":"Cards.jl Documentation","title":"Cards.PokerType","text":"PokerType (Enum)\n\nEnumeration describing a classification of hands for poker; ordered by strength from lowest to highest.\n\nFields\n\nSingles\nPair\nTwoPair\nThreeOfAKind\nFullHouse\nFourOfAKind\nFlush\nStraight\nStraightFlush\n\n\n\n\n\n","category":"type"},{"location":"#Types","page":"Cards.jl Documentation","title":"Types","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Card","category":"page"},{"location":"#Cards.Card","page":"Cards.jl Documentation","title":"Cards.Card","text":"Card\n\nDATA STRUCTURE: Representation of a Card.\n\nFields\n\nsuit :: Suit\nrank :: Rank\n\nConstructors\n\nCard(::Suit, ::Rank)\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"Deck","category":"page"},{"location":"#Cards.Deck","page":"Cards.jl Documentation","title":"Cards.Deck","text":"Deck (mutable)\n\nDATA STRUCTURE: Representation of a Desk of Cards.\n\nFields\n\ncards :: Vector{Card}\nleft  :: UInt8 (position in deck where next to draw.)\n\nConstructors\n\nDeck()\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"SPHrep","category":"page"},{"location":"#Cards.SPHrep","page":"Cards.jl Documentation","title":"Cards.SPHrep","text":"SPHrep\n\nA lower level representation of a poker hand. \n\nA rep containing the data: [(rank, [Suits])].\n\nThese are the \"ordered Card Pairings\". This is a natural way that a player would organize their hand:         grouping by card ranking.\n\nThis structure will be used to place a hand in a canonical way       by ordering this structure in the following way:         First by pairings (rank, [suits]) will be ranked by rank. \n\nWithin the pair the suits will be ranked in natural order.\n\nStep 0: First sort second arg.\nStep 1: Use the comparison function above to do the sorting.\n\nFields\n\norderedCP :: Vector{Tuple{Rank, Vector{Suit}}}\n\nConstructors\n\nSPHRep(ocp::Vector{Tuple{Rank, Vector{Suit}}})\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"PHrep","category":"page"},{"location":"#Cards.PHrep","page":"Cards.jl Documentation","title":"Cards.PHrep","text":"PHrep\n\nA higher level representation of a poker hand. \n\nEssentially a rep of the form: (PokerType, SPHrep)\n\nThe SPHrep is a poker hand in canonical order – see above. This structure will allow us to compare poker hands.\n\nFields\n\npt::PokerType – The Type of hand (Single, Pair, TwoPairs, etc.)\nsubr::SPHrep  – The lower level representation.\n\nConstructors\n\nPHrep(pt::PokerType, sr::SPHrep)\n\n\n\n\n\n","category":"type"},{"location":"#Functions","page":"Cards.jl Documentation","title":"Functions","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"pokerHandSubRep","category":"page"},{"location":"#Cards.pokerHandSubRep","page":"Cards.jl Documentation","title":"Cards.pokerHandSubRep","text":"pokerHandSubRep(vs)\n\nTakes a poker hand sorted by rank from highest to lowest and converts    it to a sub-representation, SPHrep.\n\nCurrently, this has the form: [(card-rank, [suits])] Here, these paired elements are sorted from highest to lowest based     on the number of duplicate cards by rank.\n\nThe \"suits\" array keeps track of the suits of the duplicate cards      and are ordered from highest to lowest.\n\nIf a tie appears (say with a hand that has type TwoPairs) sort by the larger of the      card rankings of the paired elements.\n\nExamples\n\nExample 1: The raw (sorted by rank) hand): \n\njulia> pokerHandSubRep([ Card(♠, Ten), Card(♣, Ten), Card(♦, Two), Card(♣, Two), Card(♥, Two) ])\n\n    Two   -- [♥, ♣, ♦]\n    Ten   -- [♣, ♠]\n\nExample 2: The raw (sorted by rank) hand): \n\njulia> pokerHandSubRep([ Card(♠, Ten), Card(♣, Ten), Card(♦, Ace), Card(♥, Ace), Card(♣, Jack) ])\n\n    Ace   -- [♥, ♦]\n    Ten   -- [♣, ♠]\n    Jack  -- [♣]\n\nArguments\n\nvs – A rank-sorted Card vector.\n\nReturns\n\n::SPHrep – A SPHrep with ordering as described above.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"pokerHandGroupLength","category":"page"},{"location":"#Cards.pokerHandGroupLength","page":"Cards.jl Documentation","title":"Cards.pokerHandGroupLength","text":"pokerHandGroupLength(hsRep, n)\n\nGet the length of the nth ordered group in a poker hand.\n\nExample: Given that we have a poker hand sub rep, hsRep,              representing a full house,          This function would return 3 for the call pokerHandGroupLength(hsRep, 1)         and return 2 for the call pokerHandgroupLength(hsRep, 2).\n\nArguments\n\nhsRep :: SPHrep –  A poker sub-hand representation.\nn :: Int64 – The group to examine.\n\nReturn\n\n::Int64 – The number of Cards in the n^rm th group of the sub-representation.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"get_card_rank_and_top_suit","category":"page"},{"location":"#Cards.get_card_rank_and_top_suit","page":"Cards.jl Documentation","title":"Cards.get_card_rank_and_top_suit","text":"get_card_rank_and_top_suit(handRep)\n\nGets a card ranking and its top suit for the n^rm th element of a  poker hand representation.\n\nThat is, take the nth grouping based on the      PHrep(ordered as described in the PHrep doc)     and return the rank and the top suit in that grouping.\n\nArguments\n\nhandRep::PHrep – A poker hand representation.\nn::Int64 – The index into the card groupings.\n\nReturn\n\n(Rank, Suit) – The card ranking and top suit of the nth poker hand group.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"getOrderedCardsFromRep","category":"page"},{"location":"#Cards.getOrderedCardsFromRep","page":"Cards.jl Documentation","title":"Cards.getOrderedCardsFromRep","text":"getOrderedCardsFromRep(phr)\n\nGet the rank/suit ordered list of cards from a poker hand representation.\n\nArguments\n\nphr::PHrep  – The poker hand representation of a poker hand.\n\nReturn\n\n::Vector{Card} – A new poker hand of Cards in order.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"pokerTradeInCards!","category":"page"},{"location":"#Cards.pokerTradeInCards!","page":"Cards.jl Documentation","title":"Cards.pokerTradeInCards!","text":"pokerTradeInCards!(d, h)\n\nGiven a poker hand, h, determine now many cards to replace, 0 to 2, then return the replacement. Return a copy of the original hand if  cards needed. If cards are replaced, this will mutate the deck of cards, d.\n\nArguments\n\nd::Deck – A deck of cards\nh::Vector{Card} – A poker hand.\n\nReturn\n\n::Tuple{::PHrep, ::PHrep} – Old and new replacement hands.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"playPoker2!","category":"page"},{"location":"#Cards.playPoker2!","page":"Cards.jl Documentation","title":"Cards.playPoker2!","text":"playPoker2!(d)\n\nPlay a game of poker with two players.\n\nProcess:\n\nDeal each player two 5 card hands.\nCompare two hands to see who would win.\nEach player can then ask for up to 2 cards.\nThe two players are compared again to see who wins.\n\nNote: This function mutates the deck by dealing cards            to the players.\n\nArguments\n\nd :: Deck – A deck of cards.\n\nReturn\n\nnothing\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"pokerHand","category":"page"},{"location":"#Cards.pokerHand","page":"Cards.jl Documentation","title":"Cards.pokerHand","text":"pokerHand(v)\n\nTakes a poker hand and converts it to a representation of the form:  (hand-type, poker-hand-sub-rep)  See the description of poker-hand-sub-rep in the function pokerHandSubRep.\n\nArguments\n\nv – A vector of Cards.\n\nReturn\n\n::PHrep – Essentially,      a pairing of hand-type with a vector with a sub-representation,              currently of the form: (rank, [suits]).            The sub-representation is ordered as described in the              function pokerHandSubRep.            Specifically, the return has the form:             PHrep(hand-type, SPHrep([(card-rank, [card-suits])]))\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"deal!","category":"page"},{"location":"#Cards.deal!","page":"Cards.jl Documentation","title":"Cards.deal!","text":"deal!(d, n)\n\nDeal a hand of n cards from a Deck.\n\nNote: Will mutate the deck, d.\n\nArguments\n\nA – A deck of Cards.\nn – The number of Cards to deal.\n\nReturn\n\n::Vector{Cards} – A vector of n cards.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"reset!","category":"page"},{"location":"#Cards.reset!","page":"Cards.jl Documentation","title":"Cards.reset!","text":"reset!(d)\n\nSet/reset the deck to be full. That is, gather any outstanding cards from any games and place  them back in the deck.\n\nArguments\n\nd :: Deck –A deck of Cards.\n\nReturn\n\nnothing\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"Cards.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"Cards.jl Documentation","title":"Cards.jl Documentation","text":"","category":"page"}]
}
